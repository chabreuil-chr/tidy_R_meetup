{
  "hash": "81d96807c6cb26422bed75d19f7c3af3",
  "result": {
    "markdown": "---\n# title: \"Présentation de TidyModels\"\n# subtitle: \"R addict\"\n# author: \"Clément Rieux\"\n# date: '22 Septembre 2022'\nformat: \n  revealjs:\n    footer: \"[https://github.com/clementrx/site_r](https://github.com/clementrx/site_r)&nbsp;&nbsp;&nbsp;\"\n    theme: [custom.scss]\n    code-copy: true\n    center-title-slide: false\n    highlight-style: a11y\n    code-link: true\n    code-overflow: wrap\n    height: 1080\n    width: 1600\nexecute: \n  eval: true\n  echo: true\n  freeze: auto\n---\n\n\n<h1>Présentation de `TidyModels`</h1>\n\n<h2>R addict</h2>\n\n<hr>\n\n<h3>Clément Rieux, Consultant data science Epsilon France chez EDF</h3>\n\n<h3>22 Septembre 2022</h3>\n\n<br>\n\n<h3>\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 496 512\" style=\"height:1em;width:0.97em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:black;overflow:visible;position:relative;\"><path d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"/></svg>`{=html}   [github.com/clem_rxx/presentation](https://github.com/clem/pres)\n\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/tidymodels.svg){.absolute top=\"425\" left=\"1100\" width=\"300\"}\n\n## Tidymodels\n\n> **tidymodels** est une collection de packages de modélisation qui est semblable à tidyverse. Créé par l'auteur de **caret** : Max Kuhn.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels) \n\n## ── Attaching packages ─────────────────────────── tidymodels ## 0.1.4 ──\n## ✔ broom        0.7.11     ✔ recipes      0.1.17\n## ✔ dials        0.0.10     ✔ rsample      0.1.1 \n## ✔ dplyr        1.0.7      ✔ tibble       3.1.7 \n## ✔ ggplot2      3.3.6      ✔ tidyr        1.1.4 \n## ✔ infer        1.0.0      ✔ tune         0.1.6 \n## ✔ modeldata    0.1.1      ✔ workflows    0.2.4 \n## ✔ parsnip      0.1.7      ✔ workflowsets 0.1.0 \n## ✔ purrr        0.3.4      ✔ yardstick    0.0.9 \n## ── Conflicts ───────────────────────────────────────── ## tidymodels_conflicts() ──\n## ✖ purrr::discard() masks scales::discard()\n## ✖ dplyr::filter()  masks stats::filter()\n## ✖ dplyr::lag()     masks stats::lag()\n## ✖ recipes::step()  masks stats::step()\n```\n:::\n\n\n. . .\n\n-   `rsample` : Data splitting et resampling\n-   `broom` : Manipulation des données output\n-   `recipes` : Préparation des données avant modélisation\n-   `parsnip` : Collection de modèles\n-   `yardstick` : Evaluation metrics\n-   `dials/tune` : Tuning des paramètres\n-   `worklows` : Création de workflow ...\n\n## Objectifs\n\n. . .\n\n-   Encourager les bonnes méthodologies\n\n. . .\n\n-   Construire une structure stable\n\n. . .\n\n-   Permettre une grande variété de méthodologies\n\n## Comment préparer les données avec tidymodels\n\nstep\\_\\*() <https://recipes.tidymodels.org/reference/>\n\n<iframe src=\"https://recipes.tidymodels.org/reference/\" width=\"100%\" height=\"70%\" frameBorder=\"0\">\n\n</iframe>\n\n## Comment préparer les données avec tidymodels\n\n-   `step_impute*()` Imputation des données\n    -   `step_impute_mean()`\n    -   `step_impute_linear()`\n-   `step_log()`\n-   `step_mutate()`\n-   `step_sqrt()`\n-   `step_cut()`\n-   `step_dummy()`\n-   `step_center()`\n-   `step_normalize()`\n-   `step_corr()`\n-   `step_zv()`\n\n## Comment choisir un modèle avec tidymodels\n\n1.  Choisir un modèle\n2.  Sélectionner le mode (Si nécessaire)\n3.  Paramètrer le engine\n\n## 1. Choisir un modèle\n\nPour avoir la liste des modèles disponibles : <https://www.tidymodels.org/find/parsnip/>\n\n<iframe src=\"https://www.tidymodels.org/find/parsnip/\" width=\"100%\" height=\"70%\" frameBorder=\"0\">\n\n</iframe>\n\n\n\n## 1. Choisir un modèle\n\nRégression linéaire\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg(penalty = NULL, mixture = NULL)\n```\n:::\n\n\n. . .\n\nRandom Forest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_forest(mtry = NULL, trees = NULL, min_n = NULL)\n```\n:::\n\n\n## 2. Sélectionner le mode\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() %>% \n  set_mode(mode = \"regression\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg() %>% \n  set_mode(mode = \"classification\")\n```\n:::\n\n\n## 3. Paramètrer le engine\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() %>% \n  set_engine(\"spark\" )\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_forest() %>% \n  set_engine(\"randomForest\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_forest() %>% \n  set_engine(\"ranger\")\n```\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n:::\n\n\n::: {style=\"text-align: center\"}\n`Données`\n:::\n\n<br>\n\n::: {style=\"font-size: 0.75em\"}\n\n::: {.cell}\n::: {.cell-output-display}\n| age| gender| height| weight|    steps| hear_rate|   calories|  distance| entropy_heart| entropy_setps| resting_heart| corr_heart_steps| norm_heart| intensity_karvonen| sd_norm_heart| steps_times_distance|device      |activity |\n|---:|------:|------:|------:|--------:|---------:|----------:|---------:|-------------:|-------------:|-------------:|----------------:|----------:|------------------:|-------------:|--------------------:|:-----------|:--------|\n|  20|      1|    168|   65.4| 10.77143|  78.53130|  0.3445329| 0.0083269|      6.221612|      6.116349|            59|        1.0000000|   19.53130|          0.1385199|      1.000000|            0.0896921|apple watch |Lying    |\n|  20|      1|    168|   65.4| 11.47532|  78.45339|  3.2876255| 0.0088963|      6.221612|      6.116349|            59|        1.0000000|   19.45339|          0.1379673|      1.000000|            0.1020885|apple watch |Lying    |\n|  20|      1|    168|   65.4| 12.17922|  78.54083|  9.4840000| 0.0094658|      6.221612|      6.116349|            59|        1.0000000|   19.54083|          0.1385874|      1.000000|            0.1152865|apple watch |Lying    |\n|  20|      1|    168|   65.4| 12.88312|  78.62826| 10.1545556| 0.0100353|      6.221612|      6.116349|            59|        1.0000000|   19.62826|          0.1392075|      1.000000|            0.1292863|apple watch |Lying    |\n|  20|      1|    168|   65.4| 13.58701|  78.71569| 10.8251111| 0.0106048|      6.221612|      6.116349|            59|        0.9828157|   19.71569|          0.1398276|      0.241567|            0.1440877|apple watch |Lying    |\n|  20|      1|    168|   65.4| 14.29091|  78.80313| 11.4956667| 0.0111743|      6.221612|      6.116349|            59|        1.0000000|   19.80313|          0.1404477|      0.264722|            0.1596909|apple watch |Sitting  |\n:::\n:::\n\n:::\n\n::: {style=\"text-align: center\"}\n<https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/ZS2Z2J>\n:::\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ndata_split <- initial_split(df, \n                            strata = activity)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Analysis/Assess/Total>\n<2740/916/3656>\n```\n:::\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- training(data_split) \ntest_data <- testing(data_split)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(train_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2740\n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 916\n```\n:::\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_rec = recipe(activity ~ . , data = train_data) \n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_rec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         17\n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df_rec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 4\n   variable             type    role      source  \n   <chr>                <chr>   <chr>     <chr>   \n 1 age                  numeric predictor original\n 2 gender               numeric predictor original\n 3 height               numeric predictor original\n 4 weight               numeric predictor original\n 5 steps                numeric predictor original\n 6 hear_rate            numeric predictor original\n 7 calories             numeric predictor original\n 8 distance             numeric predictor original\n 9 entropy_heart        numeric predictor original\n10 entropy_setps        numeric predictor original\n11 resting_heart        numeric predictor original\n12 corr_heart_steps     numeric predictor original\n13 norm_heart           numeric predictor original\n14 intensity_karvonen   numeric predictor original\n15 sd_norm_heart        numeric predictor original\n16 steps_times_distance numeric predictor original\n17 device               nominal predictor original\n18 activity             nominal outcome   original\n```\n:::\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_rec = recipe(activity ~ . , data = train_data) %>% \n  step_num2factor(gender,\n                  transform = function(x) x + 1,\n                  levels = c('femme', 'homme')) %>% \n  step_rm(device) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_normalize(all_numeric()) %>% \n  step_zv(all_numeric()) %>% \n  step_corr(all_numeric_predictors(), threshold = 0.7) \n```\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-9\"}\ndf_rec = recipe(activity ~ . , data = train_data) %>% \n  step_num2factor(gender,\n                  transform = function(x) x + 1,\n                  levels = c('femme', 'homme')) %>% \n  step_rm(device) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_normalize(all_numeric()) %>% \n  step_zv(all_numeric()) %>% \n  step_corr(all_numeric_predictors(), threshold = 0.7) \n```\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-4|5|6|7|8|9\"}\ndf_rec = recipe(activity ~ . , data = train_data) %>% \n  step_num2factor(gender,\n                  transform = function(x) x + 1,\n                  levels = c('femme', 'homme')) %>% \n  step_rm(device) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_normalize(all_numeric()) %>% \n  step_zv(all_numeric()) %>% \n  step_corr(all_numeric_predictors(), threshold = 0.7) \n```\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencoded = df_rec %>%\n  prep() %>%\n  juice()\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n|       age|     weight|      steps|  calories| entropy_heart| entropy_setps| resting_heart| corr_heart_steps| norm_heart| sd_norm_heart| steps_times_distance|activity | gender_homme|\n|---------:|----------:|----------:|---------:|-------------:|-------------:|-------------:|----------------:|----------:|-------------:|--------------------:|:--------|------------:|\n| -1.040763| -0.3697346| -0.6229780| 0.6097959|     0.4528588|     0.3606604|     -0.806288|         1.344866| -0.1425708|    -0.7808465|           -0.3534188|Lying    |      1.06468|\n| -1.040763| -0.3697346| -0.6204065| 0.7022291|     0.4528588|     0.3606604|     -0.806288|         1.321581| -0.1389498|    -0.8558210|           -0.3532882|Lying    |      1.06468|\n| -1.040763| -0.3697346| -0.5766909| 1.3325475|     0.4528588|     0.3606604|     -0.806288|         1.344866| -0.0773928|    -0.8535320|           -0.3499853|Lying    |      1.06468|\n| -1.040763| -0.3697346| -0.5715479| 1.3292048|     0.4528588|     0.3606604|     -0.806288|         1.344866| -0.0701508|    -0.8535320|           -0.3494623|Lying    |      1.06468|\n| -1.040763| -0.3697346| -0.5664048| 1.3258620|     0.4528588|     0.3606604|     -0.806288|         1.344866| -0.0629088|    -0.8535320|           -0.3489110|Lying    |      1.06468|\n| -1.040763| -0.3697346| -0.6006315| 1.6465117|     0.4528588|     0.3606604|     -0.806288|        -1.365160| -0.0085939|    -0.8535320|           -0.3522278|Lying    |      1.06468|\n:::\n:::\n\n\n## Exemple de classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- \n  rand_forest(trees = 200) %>% \n  set_engine(\"ranger\", importance = \"impurity\") %>% \n  set_mode(\"classification\")\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivity_wflow <- \n  workflow() %>% \n  add_recipe(df_rec) %>% \n  add_model(rf_spec)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivty_fit <- \n  activity_wflow %>% \n  fit(data = train_data)\n```\n:::\n\n\n## Exemple Classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(activty_fit, test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 916 × 1\n   .pred_class   \n   <fct>         \n 1 Lying         \n 2 Lying         \n 3 Lying         \n 4 Sitting       \n 5 Sitting       \n 6 Self Pace walk\n 7 Self Pace walk\n 8 Lying         \n 9 Lying         \n10 Lying         \n# … with 906 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivity_pred <- \n  augment(activty_fit, test_data)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable = activity_pred %>%\n  select(activity, \n         contains(\".pred_\"))\n```\n:::\n\n\n. . .\n\n::: {style=\"font-size: 0.45em\"}\n\n::: {.cell}\n::: {.cell-output-display}\n|activity |.pred_class    | .pred_Lying| .pred_Running 3 METs| .pred_Running 5 METs| .pred_Running 7 METs| .pred_Self Pace walk| .pred_Sitting|\n|:--------|:--------------|-----------:|--------------------:|--------------------:|--------------------:|--------------------:|-------------:|\n|Lying    |Lying          |   0.5376885|            0.0374524|            0.0519196|            0.0675595|            0.1152192|     0.1901607|\n|Lying    |Lying          |   0.4815575|            0.0423690|            0.0238571|            0.0590774|            0.1259127|     0.2672262|\n|Lying    |Lying          |   0.4424762|            0.0297579|            0.0264365|            0.0475218|            0.1692540|     0.2845536|\n|Sitting  |Sitting        |   0.2001508|            0.0182758|            0.0275615|            0.0166885|            0.2891369|     0.4481865|\n|Sitting  |Sitting        |   0.1783532|            0.0185258|            0.0250794|            0.0060635|            0.3084881|     0.4634901|\n|Sitting  |Self Pace walk |   0.1181954|            0.0200446|            0.0149722|            0.0025635|            0.5514500|     0.2927743|\n:::\n:::\n\n:::\n\n## Exemple Classification\n\n### Performances\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivity_pred %>% \n  select(-.pred_class) %>% \n  roc_auc(truth = as.factor(activity), contains(\".pred_\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc hand_till      0.965\n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivity_pred %>% \n  accuracy(truth = as.factor(activity), .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.790\n```\n:::\n:::\n\n\n## Exemple Classification\n\n### Performances\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nactivity_pred %>% \n  conf_mat(activity, .pred_class) %>% \n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exemple Classification\n\n### Performances\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nactivity_pred %>% \n  select(-.pred_class) %>% \n  roc_curve(truth = as.factor(activity), contains(\".pred_\")) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-34-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exemple Classification\n\n### Tuning parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_spec <- rand_forest(\n  mtry = tune(),\n  trees = 200,\n  min_n = tune()\n) %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"ranger\")\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_wf <- workflow() %>%\n  add_recipe(df_rec) %>% \n  add_model(tune_spec)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(100)\ncv_folds <-\n  vfold_cv(train_data, \n            v = 3, \n           strata = activity) \n```\n:::\n\n\n## Exemple Classification\n\n### Tuning parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(345)\ntune_res <- tune_grid(\n  tune_wf,\n  resamples = cv_folds,\n  grid = 20\n)\n```\n:::\n\n\n## Exemple Classification\n\n### Tuning parameter\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntune_res %>%\n  collect_metrics() %>%\n  filter(.metric == \"accuracy\") %>%\n  select(mean, min_n, mtry) %>%\n  pivot_longer(min_n:mtry,\n               values_to = \"value\",\n               names_to = \"parameter\"\n  ) %>%\n  ggplot(aes(value, mean, color = parameter)) +\n  geom_point(show.legend = FALSE) +\n  facet_wrap(~parameter, scales = \"free_x\") +\n  labs(x = NULL, y = \"ACC\")\n```\n\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-40-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exemple Classification\n\n### Tuning parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_grid <- grid_regular(\n  min_n(range = c(1, 8)),\n  mtry(range = c(9, 20)),\n  levels = 2 # nombre de niveaux par paramètre\n)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(456)\nregular_res <- tune_grid(\n  tune_wf,\n  resamples = cv_folds,\n  grid = rf_grid\n)\n```\n:::\n\n\n## Exemple Classification\n\n### Tuning parameter\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nregular_res %>%\n  collect_metrics() %>%\n  filter(.metric == \"accuracy\") %>%\n  select(mean, min_n, mtry) %>%\n  pivot_longer(min_n:mtry,\n               values_to = \"value\",\n               names_to = \"parameter\"\n  ) %>%\n  ggplot(aes(value, mean, color = parameter)) +\n  geom_point(show.legend = FALSE) +\n  facet_wrap(~parameter, scales = \"free_x\") +\n  labs(x = NULL, y = \"ACC\")\n```\n\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-43-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exemple Classification\n\n### Tuning parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_acc <- select_best(regular_res, \"accuracy\")\n\nfinal_rf <- finalize_model(\n  tune_spec,\n  best_acc\n)\n```\n:::\n\n\n## Exemple Classification\n\n### Finalisation du workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_wf <- workflow() %>%\n  add_recipe(df_rec) %>%\n  add_model(final_rf)\n```\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_res <- final_wf %>%\n  last_fit(data_split) # train sur train et evalue sur test\n```\n:::\n\n\n## Exemple Classification\n\n### Performances\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_res %>% \n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy multiclass     0.800 Preprocessor1_Model1\n2 roc_auc  hand_till      0.969 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## Exemple Classification\n\n### Performances\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfinal_res %>% \n  collect_predictions() %>% \n  conf_mat(activity, .pred_class) %>% \n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-48-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exemple Classification\n\n### Performances\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfinal_res %>% \n  collect_predictions() %>% \n  select(-.pred_class) %>% \n  roc_curve(truth = as.factor(activity), contains(\".pred_\")) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-49-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Exemple Classification\n\n### Enregistrement du modèle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_activity_model = final_res %>%\n  extract_workflow()\n\nsaveRDS(final_activity_model, here::here(\"data\", \"activity_wf_model.rds\"))\n```\n:::\n\n\n\n## Exemple de série temporelle\n\nPour les séries temporelles nous avons besoin de quelques library supplémentaires.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modeltime)\nlibrary(timetk)\nlibrary(lubridate)\nlibrary(ggblanket)\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n|ds         |    y|\n|:----------|----:|\n|2022-07-26 | 21.0|\n|2022-07-27 | 21.5|\n|2022-07-28 | 23.0|\n|2022-07-29 | 25.0|\n|2022-07-30 | 25.5|\n|2022-07-31 | 23.5|\n:::\n:::\n\n\n:::\n\n::::\n\n## Exemple de série temporelle\n\nLa library `timetk` va nous servir à créer notre split train/test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit = time_series_split(\n  ts_data,\n  assess = \"15 days\",\n  cumulative = TRUE\n)\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-e532385fc661b3e80aaa\" style=\"width:960px;height:480px;\" class=\"plotly html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e532385fc661b3e80aaa\">{\"x\":{\"data\":[{\"x\":[\"2022-03-02\",\"2022-03-03\",\"2022-03-04\",\"2022-03-05\",\"2022-03-06\",\"2022-03-07\",\"2022-03-08\",\"2022-03-09\",\"2022-03-10\",\"2022-03-11\",\"2022-03-12\",\"2022-03-13\",\"2022-03-14\",\"2022-03-15\",\"2022-03-16\",\"2022-03-17\",\"2022-03-18\",\"2022-03-19\",\"2022-03-20\",\"2022-03-21\",\"2022-03-22\",\"2022-03-23\",\"2022-03-24\",\"2022-03-25\",\"2022-03-26\",\"2022-03-27\",\"2022-03-28\",\"2022-03-29\",\"2022-03-30\",\"2022-03-31\",\"2022-04-01\",\"2022-04-02\",\"2022-04-03\",\"2022-04-04\",\"2022-04-05\",\"2022-04-06\",\"2022-04-07\",\"2022-04-08\",\"2022-04-09\",\"2022-04-10\",\"2022-04-11\",\"2022-04-12\",\"2022-04-13\",\"2022-04-14\",\"2022-04-15\",\"2022-04-16\",\"2022-04-17\",\"2022-04-18\",\"2022-04-19\",\"2022-04-20\",\"2022-04-21\",\"2022-04-22\",\"2022-04-23\",\"2022-04-24\",\"2022-04-25\",\"2022-04-26\",\"2022-04-27\",\"2022-04-28\",\"2022-04-29\",\"2022-04-30\",\"2022-05-01\",\"2022-05-02\",\"2022-05-03\",\"2022-05-04\",\"2022-05-05\",\"2022-05-06\",\"2022-05-07\",\"2022-05-08\",\"2022-05-09\",\"2022-05-10\",\"2022-05-11\",\"2022-05-12\",\"2022-05-13\",\"2022-05-14\",\"2022-05-15\",\"2022-05-16\",\"2022-05-17\",\"2022-05-18\",\"2022-05-19\",\"2022-05-20\",\"2022-05-21\",\"2022-05-22\",\"2022-05-23\",\"2022-05-24\",\"2022-05-25\",\"2022-05-26\",\"2022-05-27\",\"2022-05-28\",\"2022-05-29\",\"2022-05-30\",\"2022-05-31\",\"2022-06-01\",\"2022-06-02\",\"2022-06-03\",\"2022-06-04\",\"2022-06-05\",\"2022-06-06\",\"2022-06-07\",\"2022-06-08\",\"2022-06-09\",\"2022-06-10\",\"2022-06-11\",\"2022-06-12\",\"2022-06-13\",\"2022-06-14\",\"2022-06-15\",\"2022-06-16\",\"2022-06-17\",\"2022-06-18\",\"2022-06-19\",\"2022-06-20\",\"2022-06-21\",\"2022-06-22\",\"2022-06-23\",\"2022-06-24\",\"2022-06-25\",\"2022-06-26\",\"2022-06-27\",\"2022-06-28\",\"2022-06-29\",\"2022-06-30\",\"2022-07-01\",\"2022-07-02\",\"2022-07-03\",\"2022-07-04\",\"2022-07-05\",\"2022-07-06\",\"2022-07-07\",\"2022-07-08\",\"2022-07-09\",\"2022-07-10\",\"2022-07-11\",\"2022-07-12\",\"2022-07-13\",\"2022-07-14\",\"2022-07-15\",\"2022-07-16\"],\"y\":[7.5,9,9,7.5,7,5.5,7,10.5,11,10,9,8,8,12,14,10.5,11,12,10.5,12.5,13.5,13.5,14,14,14.5,15,16,15.5,9,7.5,2,2.5,4.5,6.5,10.5,10,10,6.5,7.5,9,10.5,14.5,15,16.5,16,15.5,13,13.5,14,13.5,12,12.5,13.5,11.5,12.5,12.5,12,14,14.5,12.5,13,13,14.5,15,15.5,16,16,14.5,18,20,19,17,17,18,19,20,22,22.5,21.5,19.5,19,18.5,17.5,14.5,15.5,18,18,15,11.5,13,17,17,17.5,19.5,22.5,21,18,18,18,16,21.5,22,20,19,20.5,24,24,27,32.5,26,20,22,23.5,24.5,20,17.5,16.5,20,21,22,15.5,17,21.5,20.5,20.5,20.5,20,20.5,19,24,20,23.5,28,31,27,22.5,24.5],\"text\":[\"ds: 2022-03-02<br />.value:  7.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-03<br />.value:  9.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-04<br />.value:  9.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-05<br />.value:  7.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-06<br />.value:  7.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-07<br />.value:  5.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-08<br />.value:  7.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-09<br />.value: 10.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-10<br />.value: 11.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-11<br />.value: 10.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-12<br />.value:  9.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-13<br />.value:  8.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-14<br />.value:  8.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-15<br />.value: 12.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-16<br />.value: 14.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-17<br />.value: 10.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-18<br />.value: 11.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-19<br />.value: 12.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-20<br />.value: 10.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-21<br />.value: 12.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-22<br />.value: 13.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-23<br />.value: 13.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-24<br />.value: 14.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-25<br />.value: 14.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-26<br />.value: 14.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-27<br />.value: 15.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-28<br />.value: 16.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-29<br />.value: 15.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-30<br />.value:  9.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-03-31<br />.value:  7.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-01<br />.value:  2.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-02<br />.value:  2.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-03<br />.value:  4.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-04<br />.value:  6.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-05<br />.value: 10.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-06<br />.value: 10.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-07<br />.value: 10.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-08<br />.value:  6.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-09<br />.value:  7.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-10<br />.value:  9.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-11<br />.value: 10.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-12<br />.value: 14.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-13<br />.value: 15.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-14<br />.value: 16.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-15<br />.value: 16.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-16<br />.value: 15.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-17<br />.value: 13.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-18<br />.value: 13.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-19<br />.value: 14.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-20<br />.value: 13.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-21<br />.value: 12.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-22<br />.value: 12.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-23<br />.value: 13.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-24<br />.value: 11.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-25<br />.value: 12.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-26<br />.value: 12.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-27<br />.value: 12.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-28<br />.value: 14.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-29<br />.value: 14.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-04-30<br />.value: 12.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-01<br />.value: 13.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-02<br />.value: 13.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-03<br />.value: 14.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-04<br />.value: 15.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-05<br />.value: 15.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-06<br />.value: 16.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-07<br />.value: 16.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-08<br />.value: 14.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-09<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-10<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-11<br />.value: 19.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-12<br />.value: 17.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-13<br />.value: 17.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-14<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-15<br />.value: 19.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-16<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-17<br />.value: 22.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-18<br />.value: 22.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-19<br />.value: 21.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-20<br />.value: 19.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-21<br />.value: 19.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-22<br />.value: 18.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-23<br />.value: 17.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-24<br />.value: 14.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-25<br />.value: 15.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-26<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-27<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-28<br />.value: 15.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-29<br />.value: 11.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-30<br />.value: 13.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-05-31<br />.value: 17.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-01<br />.value: 17.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-02<br />.value: 17.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-03<br />.value: 19.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-04<br />.value: 22.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-05<br />.value: 21.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-06<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-07<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-08<br />.value: 18.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-09<br />.value: 16.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-10<br />.value: 21.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-11<br />.value: 22.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-12<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-13<br />.value: 19.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-14<br />.value: 20.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-15<br />.value: 24.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-16<br />.value: 24.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-17<br />.value: 27.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-18<br />.value: 32.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-19<br />.value: 26.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-20<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-21<br />.value: 22.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-22<br />.value: 23.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-23<br />.value: 24.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-24<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-25<br />.value: 17.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-26<br />.value: 16.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-27<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-28<br />.value: 21.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-29<br />.value: 22.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-06-30<br />.value: 15.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-01<br />.value: 17.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-02<br />.value: 21.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-03<br />.value: 20.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-04<br />.value: 20.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-05<br />.value: 20.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-06<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-07<br />.value: 20.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-08<br />.value: 19.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-09<br />.value: 24.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-10<br />.value: 20.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-11<br />.value: 23.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-12<br />.value: 28.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-13<br />.value: 31.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-14<br />.value: 27.0<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-15<br />.value: 22.5<br />.color_mod: training<br />.color_mod: training\",\"ds: 2022-07-16<br />.value: 24.5<br />.color_mod: training<br />.color_mod: training\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(44,62,80,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"training\",\"legendgroup\":\"training\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[\"2022-07-17\",\"2022-07-18\",\"2022-07-19\",\"2022-07-20\",\"2022-07-21\",\"2022-07-22\",\"2022-07-23\",\"2022-07-24\",\"2022-07-25\",\"2022-07-26\",\"2022-07-27\",\"2022-07-28\",\"2022-07-29\",\"2022-07-30\",\"2022-07-31\"],\"y\":[26.5,32.5,33,23.5,24,23.5,24.5,27.5,26,21,21.5,23,25,25.5,23.5],\"text\":[\"ds: 2022-07-17<br />.value: 26.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-18<br />.value: 32.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-19<br />.value: 33.0<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-20<br />.value: 23.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-21<br />.value: 24.0<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-22<br />.value: 23.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-23<br />.value: 24.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-24<br />.value: 27.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-25<br />.value: 26.0<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-26<br />.value: 21.0<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-27<br />.value: 21.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-28<br />.value: 23.0<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-29<br />.value: 25.0<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-30<br />.value: 25.5<br />.color_mod: testing<br />.color_mod: testing\",\"ds: 2022-07-31<br />.value: 23.5<br />.color_mod: testing<br />.color_mod: testing\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(227,26,28,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"testing\",\"legendgroup\":\"testing\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":59.8356164383562,\"r\":7.30593607305936,\"b\":29.9543378995434,\"l\":22.648401826484},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.6118721461187},\"title\":{\"text\":\"Time Series Cross Validation Plan\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":17.5342465753425},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"date\",\"autorange\":true,\"range\":[\"2022-02-22\",\"2022-08-07\"],\"tickmode\":\"auto\",\"ticktext\":[\"mar\",\"avr\",\"mai\",\"jui\",\"jul\",\"aoû\"],\"tickvals\":[19052,19083,19113,19144,19174,19205],\"categoryorder\":\"array\",\"categoryarray\":[\"mar\",\"avr\",\"mai\",\"jui\",\"jul\",\"aoû\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(204,204,204,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.22139200221392,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.22139200221392,\"zeroline\":false,\"anchor\":\"y\",\"title\":\"\",\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":true,\"range\":[0.45,34.55],\"tickmode\":\"auto\",\"ticktext\":[\"10\",\"20\",\"30\"],\"tickvals\":[10,20,30],\"categoryorder\":\"array\",\"categoryarray\":[\"10\",\"20\",\"30\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(204,204,204,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.22139200221392,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.22139200221392,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(44,62,80,1)\",\"width\":0.33208800332088,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":\"rgba(44,62,80,1)\",\"line\":{\"color\":\"rgba(44,62,80,1)\",\"width\":0.66417600664176,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":24.9730178497302,\"yanchor\":1,\"ysizemode\":\"pixel\"}],\"annotations\":[{\"text\":\"Slice1\",\"x\":0.5,\"y\":1,\"showarrow\":false,\"ax\":0,\"ay\":0,\"font\":{\"color\":\"rgba(255,255,255,1)\",\"family\":\"\",\"size\":11.689497716895},\"xref\":\"paper\",\"yref\":\"paper\",\"textangle\":-0,\"xanchor\":\"center\",\"yanchor\":\"bottom\"}],\"showlegend\":true,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":11.689497716895},\"title\":{\"text\":\"Legend\",\"font\":{\"color\":\"rgba(44,62,80,1)\",\"family\":\"\",\"size\":14.6118721461187}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"7b9e38c6f42f\":{\"x\":{},\"y\":{},\"colour\":{},\"type\":\"scatter\"}},\"cur_data\":\"7b9e38c6f42f\",\"visdat\":{\"7b9e38c6f42f\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## Exemple de série temporelle\n\nComme pour la classification nous pouvons créer une récipient pour créer des nouvelles features.\nOn pourrait également imaginer d'ajouter des régresseurs à notre jeu de données initial afin d'améliorer notre modèle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecipe_spec <- recipe(y ~ ds, training(split)) %>%\n  step_timeseries_signature(ds) %>%\n  step_rm(contains(\"am.pm\"), contains(\"hour\"), contains(\"minute\"),\n          contains(\"second\"), contains(\"xts\")) %>%\n  step_fourier(ds, period = 365, K = 5) %>%\n  step_dummy(all_nominal()) \n  \ntable = recipe_spec %>% prep() %>% juice()\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n|ds         |    y| ds_index.num| ds_year| ds_year.iso| ds_half| ds_quarter| ds_month| ds_day| ds_wday| ds_mday| ds_qday| ds_yday| ds_mweek| ds_week| ds_week.iso| ds_week2| ds_week3| ds_week4| ds_mday7| ds_sin365_K1| ds_cos365_K1| ds_sin365_K2| ds_cos365_K2| ds_sin365_K3| ds_cos365_K3| ds_sin365_K4| ds_cos365_K4| ds_sin365_K5| ds_cos365_K5| ds_month.lbl_01| ds_month.lbl_02| ds_month.lbl_03| ds_month.lbl_04| ds_month.lbl_05| ds_month.lbl_06| ds_month.lbl_07| ds_month.lbl_08| ds_month.lbl_09| ds_month.lbl_10| ds_month.lbl_11| ds_wday.lbl_1| ds_wday.lbl_2| ds_wday.lbl_3| ds_wday.lbl_4| ds_wday.lbl_5| ds_wday.lbl_6|\n|:----------|----:|------------:|-------:|-----------:|-------:|----------:|--------:|------:|-------:|-------:|-------:|-------:|--------:|-------:|-----------:|--------:|--------:|--------:|--------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|------------:|---------------:|---------------:|---------------:|---------------:|---------------:|---------------:|---------------:|---------------:|---------------:|---------------:|---------------:|-------------:|-------------:|-------------:|-------------:|-------------:|-------------:|\n|2010-01-01 |  0.0|   1262304000|    2010|        2009|       1|          1|        1|      1|       6|       1|       1|       1|        0|       1|          53|        1|        1|        1|        1|    0.1712931|    0.9852201|    0.3375229|    0.9413173|    0.4937756|    0.8695894|    0.6354323|    0.7721566|    0.7583058|    0.6518990|      -0.4599331|       0.5018282|      -0.4599331|       0.3687669|      -0.2616083|       0.1641974|      -0.0904791|       0.0430767|      -0.0172126|       0.0054561|      -0.0011906|     0.3779645|     0.0000000|    -0.4082483|    -0.5640761|    -0.4364358|    -0.1973855|\n|2010-01-02 |  1.0|   1262390400|    2010|        2009|       1|          1|        1|      2|       7|       2|       2|       2|        0|       1|          53|        1|        1|        1|        1|    0.1882267|    0.9821256|    0.3697245|    0.9291414|    0.5380052|    0.8429415|    0.6870528|    0.7266075|    0.8115391|    0.5842982|      -0.4599331|       0.5018282|      -0.4599331|       0.3687669|      -0.2616083|       0.1641974|      -0.0904791|       0.0430767|      -0.0172126|       0.0054561|      -0.0011906|     0.5669467|     0.5455447|     0.4082483|     0.2417469|     0.1091089|     0.0328976|\n|2010-01-03 |  2.0|   1262476800|    2010|        2009|       1|          1|        1|      3|       1|       3|       3|       3|        0|       1|          53|        1|        1|        1|        1|    0.2051045|    0.9787401|    0.4014880|    0.9158643|    0.5808003|    0.8140461|    0.7354170|    0.6776148|    0.8587640|    0.5123714|      -0.4599331|       0.5018282|      -0.4599331|       0.3687669|      -0.2616083|       0.1641974|      -0.0904791|       0.0430767|      -0.0172126|       0.0054561|      -0.0011906|    -0.5669467|     0.5455447|    -0.4082483|     0.2417469|    -0.1091089|     0.0328976|\n|2010-01-04 | -2.0|   1262563200|    2010|        2010|       1|          1|        1|      4|       2|       4|       4|       4|        1|       1|           1|        1|        1|        1|        1|    0.2219215|    0.9750645|    0.4327756|    0.9015017|    0.6220467|    0.7829801|    0.7802959|    0.6254106|    0.8996309|    0.4366512|      -0.4599331|       0.5018282|      -0.4599331|       0.3687669|      -0.2616083|       0.1641974|      -0.0904791|       0.0430767|      -0.0172126|       0.0054561|      -0.0011906|    -0.3779645|     0.0000000|     0.4082483|    -0.5640761|     0.4364358|    -0.1973855|\n|2010-01-05 | -2.5|   1262649600|    2010|        2010|       1|          1|        1|      5|       3|       5|       5|       5|        1|       1|           1|        1|        1|        1|        1|    0.2386728|    0.9711001|    0.4635503|    0.8860706|    0.6616346|    0.7498264|    0.8214766|    0.5702423|    0.9338372|    0.3576982|      -0.4599331|       0.5018282|      -0.4599331|       0.3687669|      -0.2616083|       0.1641974|      -0.0904791|       0.0430767|      -0.0172126|       0.0054561|      -0.0011906|    -0.1889822|    -0.3273268|     0.4082483|     0.0805823|    -0.5455447|     0.4934638|\n|2010-01-06 | -4.5|   1262736000|    2010|        2010|       1|          1|        1|      6|       4|       6|       6|       6|        1|       1|           1|        1|        1|        1|        1|    0.2553533|    0.9668478|    0.4937756|    0.8695894|    0.6994583|    0.7146734|    0.8587640|    0.5123714|    0.9611298|    0.2760970|      -0.4599331|       0.5018282|      -0.4599331|       0.3687669|      -0.2616083|       0.1641974|      -0.0904791|       0.0430767|      -0.0172126|       0.0054561|      -0.0011906|     0.0000000|    -0.4364358|     0.0000000|     0.4834938|     0.0000000|    -0.6579517|\n:::\n:::\n\n\n## Exemple de série temporelle\n\nCependant pour les séries temporelles, une bonne pratique est de tester notre modèle sur plusieurs périodes différentes.\n\n. . .\n\nOn va donc créer plusieurs splits de train/test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_k_folds = rolling_origin(ts_data,\n                            initial = 1600,\n                            assess = 15, \n                            skip = 120)\n```\n:::\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](site_R_files/figure-revealjs/unnamed-chunk-59-1.png){width=960}\n:::\n:::\n\n\n## Exemple de série temporelle\n\nCréation d'une fonction afin d'itérer un ou plusieurs modèles sur nos différents splits.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4|5|7-10|12-15|17-18|20-23|25-28|30-31|33-42\"}\ntune_prophet = function(splits){\n  \n  train_data = analysis(splits)\n  test_data = assessment(splits)\n  splits_calib <- initial_time_split(train_data, prop = 0.85)\n  \n  model_spec_prophet_boost <- prophet_boost(\n    prior_scale_changepoints = 0.01,\n    prior_scale_seasonality = 5) %>%\n    set_engine(\"prophet_xgboost\") \n  \n  workflow_fit_prophet_boost <- workflow() %>%\n    add_recipe(recipe_spec) %>%\n    add_model(model_spec_prophet_boost) %>%\n    fit(training(splits_calib))\n  \n  calib_table = workflow_fit_prophet_boost %>%  \n    modeltime_calibrate(testing(splits_calib))\n  \n  future_prophet_boost = calib_table %>% \n    modeltime_refit(train_data) %>% \n    modeltime_forecast(new_data = test_data,\n                       actual_data = train_data)\n  \n  m_prophet = prophet::prophet(df = train_data,\n                               seasonality.mode = 'additive',\n                               changepoint.prior.scale = 0.01,\n                               seasonality.prior.scale = 5)\n  \n  future = prophet::make_future_dataframe(m_prophet, periods = nrow(test_data),\n                                          freq = 'day', include_history = FALSE)\n  \n  bind_rows(predict(m_prophet, future) %>% \n              select(ds, yhat) %>% \n              mutate(type = 'prophet'),\n            \n            future_prophet_boost %>% \n              filter(.model_desc != 'ACTUAL') %>% \n              select(ds = .index, yhat = .value) %>% \n              mutate(type = 'prophet_xgb')) %>% \n    \n    left_join(test_data, by = 'ds')\n  \n}\n```\n:::\n",
    "supporting": [
      "site_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.0/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.5.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.5.1/plotly-latest.min.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}