[
  {
    "objectID": "site_R.html#tidymodels",
    "href": "site_R.html#tidymodels",
    "title": "",
    "section": "Tidymodels",
    "text": "Tidymodels\n\ntidymodels est une collection de packages de modélisation qui est semblable à tidyverse. Créé par l’auteur de caret : Max Kuhn. La version 1.0.0 est disponible depuis le 13 juillet 2022.\n\n\n\n\n\n\n\n\nEncourager les bonnes pratiques\nSimplifier la lecture des codes\nExpérimenter plusieurs modèles\nConstruire une structure stable\nPermettre une grande variété de méthodologies"
  },
  {
    "objectID": "site_R.html#tidymodels-1",
    "href": "site_R.html#tidymodels-1",
    "title": "",
    "section": "Tidymodels",
    "text": "Tidymodels\n\ntidymodels est une collection de packages de modélisation qui est semblable à tidyverse. Créé par l’auteur de caret : Max Kuhn. La version 1.0.0 est disponible depuis le 13 juillet 2022.\n\n\nlibrary(tidymodels) \n\n\n\n## ── Attaching packages ─────────────────────────────────────────────────────────────────────── tidymodels 1.0.0 ──\n\n\n\n## ✔ broom        1.0.1      ✔ recipes      1.0.1 \n## ✔ dials        1.0.0      ✔ rsample      1.1.0 \n## ✔ dplyr        1.0.10     ✔ tibble       3.1.8 \n## ✔ ggplot2      3.3.6      ✔ tidyr        1.2.0 \n## ✔ infer        1.0.3      ✔ tune         1.0.0 \n## ✔ modeldata    1.0.0      ✔ workflows    1.0.0 \n## ✔ parsnip      1.0.1      ✔ workflowsets 1.0.0 \n## ✔ purrr        0.3.4      ✔ yardstick    1.0.0 \n\n\n\n## ── Conflicts ────────────────────────────────────────────────────────────────────────── tidymodels_conflicts() ──\n## ✖ purrr::discard() masks scales::discard()\n## ✖ dplyr::filter()  masks stats::filter()\n## ✖ dplyr::lag()     masks stats::lag()\n## ✖ recipes::step()  masks stats::step()"
  },
  {
    "objectID": "site_R.html#tidymodels-2",
    "href": "site_R.html#tidymodels-2",
    "title": "",
    "section": "Tidymodels",
    "text": "Tidymodels\n\ntidymodels est une collection de packages de modélisation qui est semblable à tidyverse. Créé par l’auteur de caret : Max Kuhn. La version 1.0.0 est disponible depuis le 13 juillet 2022.\n\n\n\nrsample : Data splitting et resampling\nrecipes : Préparation des données avant modélisation\nparsnip : Collection de modèles\nyardstick : Evaluation metrics\nbroom : Manipulation des données output\ndials/tune : Tuning des paramètres\nworklows : Création de workflow …"
  },
  {
    "objectID": "site_R.html#tidymodels-vs-caret",
    "href": "site_R.html#tidymodels-vs-caret",
    "title": "",
    "section": "Tidymodels vs Caret",
    "text": "Tidymodels vs Caret\nTidymodels et Caret sont deux packages pour faire de la modélisation.\n\n\n\n\nCaret\n\nSortie en 2008\nUtilisation des bases R\nN’est plus développé activement\n\n\nTidymodels\n\nSortie en Avril 2020 (Première version en Juillet 2018)\nUtilisation via le pipe\nEn cours de développement"
  },
  {
    "objectID": "site_R.html#comment-préparer-les-données-avec-tidymodels",
    "href": "site_R.html#comment-préparer-les-données-avec-tidymodels",
    "title": "",
    "section": "Comment préparer les données avec tidymodels ?",
    "text": "Comment préparer les données avec tidymodels ?\n\nstep_*()\n\nhttps://recipes.tidymodels.org/reference/"
  },
  {
    "objectID": "site_R.html#comment-préparer-les-données-avec-tidymodels-1",
    "href": "site_R.html#comment-préparer-les-données-avec-tidymodels-1",
    "title": "",
    "section": "Comment préparer les données avec tidymodels ?",
    "text": "Comment préparer les données avec tidymodels ?\n\nstep_impute*()\n\nstep_impute_mean()\nstep_impute_linear()\n\nstep_log()\nstep_mutate()\nstep_sqrt()\nstep_cut()\nstep_dummy()\nstep_center()\nstep_normalize()\nstep_corr()\nstep_zv()"
  },
  {
    "objectID": "site_R.html#comment-implémenter-un-modèle-avec-tidymodels",
    "href": "site_R.html#comment-implémenter-un-modèle-avec-tidymodels",
    "title": "",
    "section": "Comment implémenter un modèle avec tidymodels ?",
    "text": "Comment implémenter un modèle avec tidymodels ?\n\n\n\nChoisir un modèle\nSélectionner le mode (Si nécessaire)\nParamètrer le engine"
  },
  {
    "objectID": "site_R.html#choisir-un-modèle",
    "href": "site_R.html#choisir-un-modèle",
    "title": "",
    "section": "1. Choisir un modèle",
    "text": "1. Choisir un modèle\nPour avoir la liste des modèles disponibles : https://www.tidymodels.org/find/parsnip/"
  },
  {
    "objectID": "site_R.html#choisir-un-modèle-1",
    "href": "site_R.html#choisir-un-modèle-1",
    "title": "",
    "section": "1. Choisir un modèle",
    "text": "1. Choisir un modèle\nLa première étape consiste donc à choisir un (ou plusieurs) modèle(s).\n\n\nRégression linéaire\n\nlinear_reg(penalty = NULL, mixture = NULL)\n\n\n\n\nDecision tree\n\ndecision_tree(cost_complexity = NULL, tree_depth = NULL, min_n = NULL)\n\n\n\n\nRandom Forest\n\nrand_forest(mtry = NULL, trees = NULL, min_n = NULL)\n\n\n\n\nSingle layer neural network\n\nmlp(hidden_units = NULL, penalty = NULL, dropout = NULL, epochs = NULL, activation = NULL, learn_rate = NULL)"
  },
  {
    "objectID": "site_R.html#sélectionner-le-mode",
    "href": "site_R.html#sélectionner-le-mode",
    "title": "",
    "section": "2. Sélectionner le mode",
    "text": "2. Sélectionner le mode\nEn effet, pour clarifier le code et également ce que l’on souhaite prédire, on indique si l’on souhaite faire une regression ou une classification.\n\n \n\nlinear_reg() %>% \n  set_mode(mode = \"regression\")\n\n\n\n\n\nlogistic_reg() %>% \n  set_mode(mode = \"classification\")"
  },
  {
    "objectID": "site_R.html#paramètrer-le-engine",
    "href": "site_R.html#paramètrer-le-engine",
    "title": "",
    "section": "3. Paramètrer le engine",
    "text": "3. Paramètrer le engine\nEnfin, on sélectionne un engine pour indiquer la méthode de calcul que l’on souhaite.\n\n\n\nlinear_reg() %>% \n  set_engine(\"spark\" )\n\n\n\n\n\nrand_forest() %>% \n  set_engine(\"randomForest\")\n\n\n\n\n\nrand_forest() %>% \n  set_engine(\"ranger\")"
  },
  {
    "objectID": "site_R.html#exemple-de-classification",
    "href": "site_R.html#exemple-de-classification",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nDonnées\n\nReplication Data for: Using machine learning methods to predict physical activity types with Apple Watch and Fitbit data using indirect calorimetry as the criterion. Fuller Daniel, 2020.\n  \nL’objectif est de prédire depuis les données d’une montre connectée, si la personne est allongée, assise, ou pratique une activté physique selon plusieurs intensités.\n\nLien de la publication: ici"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-1",
    "href": "site_R.html#exemple-de-classification-1",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nLe protocol de test est composé de 40min de tapis roulant et 25min de position assise/allongée.  Les données sont collectées toutes les minutes. \n\nNous avons 6 activités à détecter :\n\nLying : Position allongée\nsitting : Position assise\nwalking self-paced : Marcher à son rythme\n3 METS : Equivalent métabolique 3 fois supérieur à un niveau assis\n5 METS : Equivalent métabolique 5 fois supérieur à un niveau assis\n7 METS : Equivalent métabolique 7 fois supérieur à un niveau assis\n\n\n\n\nLa publication de Daniel Fuller montre que le Rotation forest models est celui qui donne la meilleure accuracy avec 82,6%."
  },
  {
    "objectID": "site_R.html#exemple-de-classification-2",
    "href": "site_R.html#exemple-de-classification-2",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\n\n\n\n\n\nDonnées\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\ngender\nheight\nweight\nsteps\nhear_rate\ncalories\ndistance\nentropy_heart\nentropy_setps\nresting_heart\ncorr_heart_steps\nnorm_heart\nintensity_karvonen\nsd_norm_heart\nsteps_times_distance\ndevice\nactivity\n\n\n\n\n20\nwoman\n168\n65.4\n10.77143\n78.53130\n0.3445329\n0.0083269\n6.221612\n6.116349\n59\n1.0000000\n19.53130\n0.1385199\n1.000000\n0.0896921\napple watch\nLying\n\n\n20\nwoman\n168\n65.4\n11.47532\n78.45339\n3.2876255\n0.0088963\n6.221612\n6.116349\n59\n1.0000000\n19.45339\n0.1379673\n1.000000\n0.1020885\napple watch\nLying\n\n\n20\nwoman\n168\n65.4\n12.17922\n78.54083\n9.4840000\n0.0094658\n6.221612\n6.116349\n59\n1.0000000\n19.54083\n0.1385874\n1.000000\n0.1152865\napple watch\nLying\n\n\n20\nwoman\n168\n65.4\n12.88312\n78.62826\n10.1545556\n0.0100353\n6.221612\n6.116349\n59\n1.0000000\n19.62826\n0.1392075\n1.000000\n0.1292863\napple watch\nLying\n\n\n20\nwoman\n168\n65.4\n13.58701\n78.71569\n10.8251111\n0.0106048\n6.221612\n6.116349\n59\n0.9828157\n19.71569\n0.1398276\n0.241567\n0.1440877\napple watch\nLying\n\n\n20\nwoman\n168\n65.4\n14.29091\n78.80313\n11.4956667\n0.0111743\n6.221612\n6.116349\n59\n1.0000000\n19.80313\n0.1404477\n0.264722\n0.1596909\napple watch\nSitting"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-3",
    "href": "site_R.html#exemple-de-classification-3",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nLe jeu de données étant propre, nous pouvons directement split nos données en train/test via la fonction initial_split\n\n\nset.seed(123)\ndata_split <- initial_split(df, \n                            strata = activity,\n                            prop = 0.8)\n\n\n\n\n\ndata_split\n\n<Training/Testing/Total>\n<2922/734/3656>\n\n\n\ntrain_data <- training(data_split) \ntest_data <- testing(data_split)\n\n\n\n\n\nnrow(train_data)\n\n[1] 2922\n\n\n\n\n\nnrow(test_data)\n\n[1] 734"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-4",
    "href": "site_R.html#exemple-de-classification-4",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nEnsuite, nous allons définir notre modèle :\n\n\ndf_rec = recipe(activity ~ . , data = train_data) \n\n\n\n\n\ndf_rec\n\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         17"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-5",
    "href": "site_R.html#exemple-de-classification-5",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nEnsuite, nous allons définir notre modèle :\n\nsummary(df_rec)\n\n# A tibble: 18 × 4\n   variable             type    role      source  \n   <chr>                <chr>   <chr>     <chr>   \n 1 age                  numeric predictor original\n 2 gender               nominal predictor original\n 3 height               numeric predictor original\n 4 weight               numeric predictor original\n 5 steps                numeric predictor original\n 6 hear_rate            numeric predictor original\n 7 calories             numeric predictor original\n 8 distance             numeric predictor original\n 9 entropy_heart        numeric predictor original\n10 entropy_setps        numeric predictor original\n11 resting_heart        numeric predictor original\n12 corr_heart_steps     numeric predictor original\n13 norm_heart           numeric predictor original\n14 intensity_karvonen   numeric predictor original\n15 sd_norm_heart        numeric predictor original\n16 steps_times_distance numeric predictor original\n17 device               nominal predictor original\n18 activity             nominal outcome   original"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-6",
    "href": "site_R.html#exemple-de-classification-6",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nLa recette va nous permettre de faire tout le pre-processing avant la modélisation :\n\n\ndf_rec = recipe(activity ~ . , data = train_data)\n\n\n\n\ndf_rec = recipe(activity ~ . , data = train_data) %>% \n  step_rm(device) %>% \n  step_string2factor(gender) %>% \n  step_normalize(all_numeric()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_numeric()) %>% \n  step_corr(all_numeric_predictors(), threshold = 0.7)"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-7",
    "href": "site_R.html#exemple-de-classification-7",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nRegardons à quoi ressemble nos données après transformation\n\n\nencoded = df_rec %>%\n  prep() %>%\n  juice()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nweight\nsteps\ncalories\nentropy_heart\nentropy_setps\nresting_heart\ncorr_heart_steps\nnorm_heart\nsd_norm_heart\nsteps_times_distance\nactivity\ngender_woman\n\n\n\n\n-1.041208\n-0.3630108\n-0.6283199\n-0.3387966\n0.4567056\n0.3668234\n-0.7754581\n1.332403\n-0.1522931\n-0.7759316\n-0.3541834\nLying\n1\n\n\n-1.041208\n-0.3630108\n-0.6230952\n0.6060653\n0.4567056\n0.3668234\n-0.7754581\n1.332403\n-0.1450037\n-0.7759316\n-0.3539403\nLying\n1\n\n\n-1.041208\n-0.3630108\n-0.6204828\n0.6983310\n0.4567056\n0.3668234\n-0.7754581\n1.309248\n-0.1413590\n-0.8516913\n-0.3538079\nLying\n1\n\n\n-1.041208\n-0.3630108\n-0.5760726\n1.3275076\n0.4567056\n0.3668234\n-0.7754581\n1.332403\n-0.0793986\n-0.8493783\n-0.3504618\nLying\n1\n\n\n-1.041208\n-0.3630108\n-0.5734602\n1.3258393\n0.4567056\n0.3668234\n-0.7754581\n1.332403\n-0.0757539\n-0.8493783\n-0.3502004\nLying\n1\n\n\n-1.041208\n-0.3630108\n-0.5708478\n1.3241709\n0.4567056\n0.3668234\n-0.7754581\n1.332403\n-0.0721092\n-0.8493783\n-0.3499319\nLying\n1"
  },
  {
    "objectID": "site_R.html#exemple-de-classification-8",
    "href": "site_R.html#exemple-de-classification-8",
    "title": "",
    "section": "Exemple de classification",
    "text": "Exemple de classification\nOn utilise un modèle Random forest pour notre exemple\n\n\nrf_spec <- rand_forest(trees = 200) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\n\n\nCréation du workflow\n\nactivity_wflow <- workflow() %>% \n  add_recipe(df_rec) %>% \n  add_model(rf_spec)\n\n\n\n\nEntraînement du modèle\n\nactivty_fit <- activity_wflow %>% \n  fit(data = train_data)"
  },
  {
    "objectID": "site_R.html#exemple-classification",
    "href": "site_R.html#exemple-classification",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\n\nOn prédit les activités avec augment, ce qui va nous permettre de récupérer également les probabilités que le modèle associe à chaque classe.\n\n\nactivity_pred <- augment(activty_fit,\n                         test_data)\n\n\n\n\ntable = activity_pred %>%\n  select(activity, \n         contains(\".pred_\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nactivity\n.pred_class\n.pred_Lying\n.pred_Running 3 METs\n.pred_Running 5 METs\n.pred_Running 7 METs\n.pred_Self Pace walk\n.pred_Sitting\n\n\n\n\nLying\nLying\n0.6327107\n0.0507697\n0.0338254\n0.0435119\n0.1047516\n0.1344307\n\n\nLying\nLying\n0.5467818\n0.0354880\n0.0144841\n0.0569524\n0.1186456\n0.2276481\n\n\nSitting\nSitting\n0.2043730\n0.0206139\n0.0193175\n0.0155833\n0.1934807\n0.5466316\n\n\nSitting\nSitting\n0.1253014\n0.0269072\n0.0103651\n0.0167202\n0.3170674\n0.5036387\n\n\nSelf Pace walk\nSelf Pace walk\n0.1350079\n0.0523599\n0.0030556\n0.0030000\n0.7724133\n0.0341634\n\n\nSelf Pace walk\nSelf Pace walk\n0.1573968\n0.0589849\n0.0068056\n0.0030000\n0.7393160\n0.0344967"
  },
  {
    "objectID": "site_R.html#exemple-classification-1",
    "href": "site_R.html#exemple-classification-1",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nPerformances\nLe package yardstick va servir à calculer les performances :\n\n\nactivity_pred %>% \n  accuracy(truth = as.factor(activity), .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.808"
  },
  {
    "objectID": "site_R.html#exemple-classification-2",
    "href": "site_R.html#exemple-classification-2",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nPerformances\n\nactivity_pred %>% \n  select(activity, .pred_class) %>% \n  mutate(activ = as.factor(activity)) %>% \n  conf_mat(activ, .pred_class) %>% \n  autoplot(type = \"heatmap\")"
  },
  {
    "objectID": "site_R.html#exemple-classification-3",
    "href": "site_R.html#exemple-classification-3",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nPerformances\n\nactivity_pred %>% \n  select(-.pred_class) %>% \n  roc_curve(truth = as.factor(activity), contains(\".pred_\")) %>% \n  autoplot()"
  },
  {
    "objectID": "site_R.html#exemple-classification-4",
    "href": "site_R.html#exemple-classification-4",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nAfin de choisir certains paramètres, on peut également tuner notre modèle\n\n\ntune_spec <- rand_forest(mtry = tune(),\n                         trees = 200,\n                         min_n = tune()) %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"ranger\")\n\n\n\n\ntune_wf <- workflow() %>%\n  add_recipe(df_rec) %>% \n  add_model(tune_spec)\n\n\n\n\n\n\n\n\nset.seed(100)\ncv_folds <- vfold_cv(train_data, \n                     v = 3, \n                     strata = activity) \n\n\n\n\n\nset.seed(333)\ntune_res <- tune_grid(tune_wf,\n                      resamples = cv_folds,\n                      grid = 20)"
  },
  {
    "objectID": "site_R.html#exemple-classification-5",
    "href": "site_R.html#exemple-classification-5",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\n\ntune_res %>%\n  autoplot()"
  },
  {
    "objectID": "site_R.html#exemple-classification-6",
    "href": "site_R.html#exemple-classification-6",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nOn ajuste notre grille de paramètres :\n\n\nrf_grid <- grid_regular(mtry(range = c(3, 11)),\n                        min_n(range = c(1, 8)),\n                        levels = 4) # nombre de valeurs testées par paramètre\n\n\n\n\nset.seed(456)\nregular_res <- tune_grid(tune_wf,\n                         resamples = cv_folds,\n                         grid = rf_grid)"
  },
  {
    "objectID": "site_R.html#exemple-classification-7",
    "href": "site_R.html#exemple-classification-7",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\n\nregular_res %>%\n  autoplot()"
  },
  {
    "objectID": "site_R.html#exemple-classification-8",
    "href": "site_R.html#exemple-classification-8",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nSélection du meilleur modèle\n\n\nbest_acc <- select_best(regular_res, \"accuracy\")\n\nfinal_rf <- finalize_model(tune_spec,\n                           best_acc)\n\n\n\nFinalisation du workflow\n\nfinal_wf <- workflow() %>%\n  add_recipe(df_rec) %>%\n  add_model(final_rf)\n\n\n\n\nEntraînement du modèle finale\n\nfinal_res <- final_wf %>%\n  last_fit(data_split) # train sur train et evalue sur test"
  },
  {
    "objectID": "site_R.html#exemple-classification-9",
    "href": "site_R.html#exemple-classification-9",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\n\nRésultat final sur notre jeu de données :\n\n\nfinal_res %>% \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy multiclass     0.822 Preprocessor1_Model1\n2 roc_auc  hand_till      0.974 Preprocessor1_Model1"
  },
  {
    "objectID": "site_R.html#exemple-classification-10",
    "href": "site_R.html#exemple-classification-10",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\n\nfinal_res %>% \n  collect_predictions() %>% \n  conf_mat(activity, .pred_class) %>% \n  autoplot(type = \"heatmap\")"
  },
  {
    "objectID": "site_R.html#exemple-classification-11",
    "href": "site_R.html#exemple-classification-11",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nPerformances\n\nfinal_res %>% \n  collect_predictions() %>% \n  select(-.pred_class) %>% \n  roc_curve(truth = as.factor(activity), contains(\".pred_\")) %>% \n  autoplot()"
  },
  {
    "objectID": "site_R.html#exemple-classification-12",
    "href": "site_R.html#exemple-classification-12",
    "title": "",
    "section": "Exemple Classification",
    "text": "Exemple Classification\nEnregistrement du modèle\n\nfinal_activity_model = final_res %>%\n  extract_workflow()\n\nsaveRDS(final_activity_model, here::here(\"data\", \"activity_wf_model.rds\"))\n\n\n\n\nfinal_activity_model\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_rm()\n• step_string2factor()\n• step_normalize()\n• step_dummy()\n• step_zv()\n• step_corr()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~5L,      x), num.trees = ~200, min.node.size = min_rows(~1L, x), num.threads = 1,      verbose = FALSE, seed = sample.int(10^5, 1), probability = TRUE) \n\nType:                             Probability estimation \nNumber of trees:                  200 \nSample size:                      2922 \nNumber of independent variables:  12 \nMtry:                             5 \nTarget node size:                 1 \nVariable importance mode:         none \nSplitrule:                        gini \nOOB prediction error (Brier s.):  0.1793104"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle",
    "href": "site_R.html#exemple-de-série-temporelle",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nPour les séries temporelles nous avons besoin de quelques library supplémentaires.\n\nConcernant les données, nous avons web scrap les données historiques de la ville de Paris depuis le site historique meteo.\n\nIl s’agit des températures moyennes par jour (en degrès celsius) du 1er janvier 2010 au 31 juillet 2022.\n\n\n\n\n\n\nlibrary(modeltime)\nlibrary(timetk)\nlibrary(lubridate)\nlibrary(ggblanket)\n\n\n\n\n\n\n\nds\ny\n\n\n\n\n2022-07-26\n21.0\n\n\n2022-07-27\n21.5\n\n\n2022-07-28\n23.0\n\n\n2022-07-29\n25.0\n\n\n2022-07-30\n25.5\n\n\n2022-07-31\n23.5"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-1",
    "href": "site_R.html#exemple-de-série-temporelle-1",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nLa library timetk va nous servir à créer notre split train/test\n\nsplit = time_series_split(\n  ts_data,\n  assess = \"15 days\",\n  cumulative = TRUE)"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-2",
    "href": "site_R.html#exemple-de-série-temporelle-2",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\n\nsplit %>% \n  tk_time_series_cv_plan() %>% \n  filter(ds > \"2022-03-01\") %>% \n  plot_time_series_cv_plan(ds, y)"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-2-output",
    "href": "site_R.html#exemple-de-série-temporelle-2-output",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-3",
    "href": "site_R.html#exemple-de-série-temporelle-3",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nComme pour la classification nous pouvons créer une récipient pour créer des nouvelles features.\nOn pourrait également imaginer d’ajouter des régresseurs à notre jeu de données initial afin d’améliorer notre modèle.\n\n\nrecipe_spec <- recipe(y ~ ds, training(split)) %>%\n  step_timeseries_signature(ds) %>%\n  step_rm(contains(\"am.pm\"), contains(\"hour\"), contains(\"minute\"),\n          contains(\"second\"), contains(\"xts\")) %>%\n  step_fourier(ds, period = 365, K = 5) %>%\n  step_dummy(all_nominal()) \n  \ntable = recipe_spec %>% prep() %>% juice()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nds\ny\nds_index.num\nds_year\nds_year.iso\nds_half\nds_quarter\nds_month\nds_day\nds_wday\nds_mday\nds_qday\nds_yday\nds_mweek\nds_week\nds_week.iso\nds_week2\nds_week3\nds_week4\nds_mday7\nds_sin365_K1\nds_cos365_K1\nds_sin365_K2\nds_cos365_K2\nds_sin365_K3\nds_cos365_K3\nds_sin365_K4\nds_cos365_K4\nds_sin365_K5\nds_cos365_K5\nds_month.lbl_01\nds_month.lbl_02\nds_month.lbl_03\nds_month.lbl_04\nds_month.lbl_05\nds_month.lbl_06\nds_month.lbl_07\nds_month.lbl_08\nds_month.lbl_09\nds_month.lbl_10\nds_month.lbl_11\nds_wday.lbl_1\nds_wday.lbl_2\nds_wday.lbl_3\nds_wday.lbl_4\nds_wday.lbl_5\nds_wday.lbl_6\n\n\n\n\n2010-01-01\n0.0\n1262304000\n2010\n2009\n1\n1\n1\n1\n6\n1\n1\n1\n0\n1\n53\n1\n1\n1\n1\n0.1712931\n0.9852201\n0.3375229\n0.9413173\n0.4937756\n0.8695894\n0.6354323\n0.7721566\n0.7583058\n0.6518990\n-0.4599331\n0.5018282\n-0.4599331\n0.3687669\n-0.2616083\n0.1641974\n-0.0904791\n0.0430767\n-0.0172126\n0.0054561\n-0.0011906\n0.3779645\n0.0000000\n-0.4082483\n-0.5640761\n-0.4364358\n-0.1973855\n\n\n2010-01-02\n1.0\n1262390400\n2010\n2009\n1\n1\n1\n2\n7\n2\n2\n2\n0\n1\n53\n1\n1\n1\n1\n0.1882267\n0.9821256\n0.3697245\n0.9291414\n0.5380052\n0.8429415\n0.6870528\n0.7266075\n0.8115391\n0.5842982\n-0.4599331\n0.5018282\n-0.4599331\n0.3687669\n-0.2616083\n0.1641974\n-0.0904791\n0.0430767\n-0.0172126\n0.0054561\n-0.0011906\n0.5669467\n0.5455447\n0.4082483\n0.2417469\n0.1091089\n0.0328976\n\n\n2010-01-03\n2.0\n1262476800\n2010\n2009\n1\n1\n1\n3\n1\n3\n3\n3\n0\n1\n53\n1\n1\n1\n1\n0.2051045\n0.9787401\n0.4014880\n0.9158643\n0.5808003\n0.8140461\n0.7354170\n0.6776148\n0.8587640\n0.5123714\n-0.4599331\n0.5018282\n-0.4599331\n0.3687669\n-0.2616083\n0.1641974\n-0.0904791\n0.0430767\n-0.0172126\n0.0054561\n-0.0011906\n-0.5669467\n0.5455447\n-0.4082483\n0.2417469\n-0.1091089\n0.0328976\n\n\n2010-01-04\n-2.0\n1262563200\n2010\n2010\n1\n1\n1\n4\n2\n4\n4\n4\n1\n1\n1\n1\n1\n1\n1\n0.2219215\n0.9750645\n0.4327756\n0.9015017\n0.6220467\n0.7829801\n0.7802959\n0.6254106\n0.8996309\n0.4366512\n-0.4599331\n0.5018282\n-0.4599331\n0.3687669\n-0.2616083\n0.1641974\n-0.0904791\n0.0430767\n-0.0172126\n0.0054561\n-0.0011906\n-0.3779645\n0.0000000\n0.4082483\n-0.5640761\n0.4364358\n-0.1973855\n\n\n2010-01-05\n-2.5\n1262649600\n2010\n2010\n1\n1\n1\n5\n3\n5\n5\n5\n1\n1\n1\n1\n1\n1\n1\n0.2386728\n0.9711001\n0.4635503\n0.8860706\n0.6616346\n0.7498264\n0.8214766\n0.5702423\n0.9338372\n0.3576982\n-0.4599331\n0.5018282\n-0.4599331\n0.3687669\n-0.2616083\n0.1641974\n-0.0904791\n0.0430767\n-0.0172126\n0.0054561\n-0.0011906\n-0.1889822\n-0.3273268\n0.4082483\n0.0805823\n-0.5455447\n0.4934638\n\n\n2010-01-06\n-4.5\n1262736000\n2010\n2010\n1\n1\n1\n6\n4\n6\n6\n6\n1\n1\n1\n1\n1\n1\n1\n0.2553533\n0.9668478\n0.4937756\n0.8695894\n0.6994583\n0.7146734\n0.8587640\n0.5123714\n0.9611298\n0.2760970\n-0.4599331\n0.5018282\n-0.4599331\n0.3687669\n-0.2616083\n0.1641974\n-0.0904791\n0.0430767\n-0.0172126\n0.0054561\n-0.0011906\n0.0000000\n-0.4364358\n0.0000000\n0.4834938\n0.0000000\n-0.6579517"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-4",
    "href": "site_R.html#exemple-de-série-temporelle-4",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nUne fois que nous avons trouvé un modèle performant, on l’entraine.\n\nmodel_arima = arima_reg() %>% \n  set_engine(\"auto_arima\") %>% \n  fit(y~ds, training(split))\n\n\n\n\nmodel_prophet  = prophet_reg(\n  prior_scale_changepoints = 0.01,\n  prior_scale_seasonality = 5) %>% \n  set_engine(\"prophet\") %>% \n  fit(y~ds, training(split))\n\n\n\n\n\nmodel_prophet_xgb  = prophet_boost(prior_scale_changepoints = 0.01,\n                                   prior_scale_seasonality = 5) %>%\n  set_engine(\"prophet_xgboost\") \n  \nworkflow_fit_prophet_boost <- workflow() %>%\n    add_model(model_prophet_xgb) %>%\n    add_recipe(recipe_spec) %>%\n    fit(training(split))"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-5",
    "href": "site_R.html#exemple-de-série-temporelle-5",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nmodeltime nous permet de créer une table avec plusieurs modèles afin de faciliter les comparaisons de performances.\n\nmodel_table = modeltime_table(\n  model_arima,\n  model_prophet,\n  workflow_fit_prophet_boost)\n\n\n\nOn calibre la table (= prédictions sur la période de test et calcul des résidus)\n\ncalib_table = model_table %>% \n  modeltime_calibrate(testing(split))\n\n\n\n\nOn compare les performances :\n\ncalib_table %>%  modeltime_accuracy()\n\n# A tibble: 3 × 9\n  .model_id .model_desc               .type   mae  mape  mase smape  rmse   rsq\n      <int> <chr>                     <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1         1 ARIMA(2,1,1)(1,0,0)[7]    Test   2.41  8.64 0.994  9.28  3.61 0.359\n2         2 PROPHET                   Test   3.17 11.3  1.31  12.5   4.46 0.433\n3         3 PROPHET W/ XGBOOST ERRORS Test   2.89 10.4  1.19  11.4   3.94 0.140"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-6",
    "href": "site_R.html#exemple-de-série-temporelle-6",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\n\ncalib_table %>% \n  modeltime_forecast(\n    new_data = testing(split),\n    actual_data = ts_data,\n    keep_data = T) %>% \n  filter(.index > \"2022-06-10\") %>% \n  plot_modeltime_forecast()"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-6-output",
    "href": "site_R.html#exemple-de-série-temporelle-6-output",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-7",
    "href": "site_R.html#exemple-de-série-temporelle-7",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nPour prédire sur des données futures, on entraine le modèle une dernière fois sur l’ensemble des données :\n\nfuture_forecast = calib_table %>% \n  modeltime_refit(ts_data) \n\n\n\nOn applique notre modèle à +15 jours :\n\nfuture_pred = future_forecast %>% \n  modeltime_forecast(\n    h = '15 days',\n    actual_data = ts_data)"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-8",
    "href": "site_R.html#exemple-de-série-temporelle-8",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\n\nfuture_pred %>% \n  filter(.index > \"2022-06-10\") %>%\n  plot_modeltime_forecast()"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-8-output",
    "href": "site_R.html#exemple-de-série-temporelle-8-output",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle"
  },
  {
    "objectID": "site_R.html#merci",
    "href": "site_R.html#merci",
    "title": "",
    "section": "Merci !",
    "text": "Merci !\nLien de la présentation :    https://github.com/clementrx/site_r\n\nPour approfondir sur tidymodels\nPour étudier Tidymodels : Tidy Modeling with R\n\nPour voir des exemples d’utilisation en vidéos :\n   Julia Silge\n   Andrew Couch"
  },
  {
    "objectID": "site_R.html#bonus",
    "href": "site_R.html#bonus",
    "title": "",
    "section": "Bonus",
    "text": "Bonus\nSéries temporelle en cross validation"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-9",
    "href": "site_R.html#exemple-de-série-temporelle-9",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nCependant pour les séries temporelles, une bonne pratique est de tester notre modèle sur plusieurs périodes différentes.\n\n  \nOn va donc créer plusieurs splits de train/test\n\nts_k_folds = rolling_origin(ts_data,\n                            initial = 1600,\n                            assess = 15, \n                            skip = 120)"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-10",
    "href": "site_R.html#exemple-de-série-temporelle-10",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nCependant pour les séries temporelles, une bonne pratique est de tester notre modèle sur plusieurs périodes différentes.\nOn va donc créer plusieurs splits de train/test"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-11",
    "href": "site_R.html#exemple-de-série-temporelle-11",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nCréation d’une fonction afin d’itérer un ou plusieurs modèles sur nos différents splits.\n\ntune_prophet = function(splits){\n  \n  train_data = analysis(splits)\n  test_data = assessment(splits)\n  splits_calib <- initial_time_split(train_data, prop = 0.85)\n  \n  model_spec_prophet_boost <- prophet_boost(\n    prior_scale_changepoints = 0.01,\n    prior_scale_seasonality = 5) %>%\n    set_engine(\"prophet_xgboost\") \n  \n  workflow_fit_prophet_boost <- workflow() %>%\n    add_recipe(recipe_spec) %>%\n    add_model(model_spec_prophet_boost) %>%\n    fit(training(splits_calib))\n  \n  calib_table = workflow_fit_prophet_boost %>%  \n    modeltime_calibrate(testing(splits_calib))\n  \n  future_prophet_boost = calib_table %>% \n    modeltime_refit(train_data) %>% \n    modeltime_forecast(new_data = test_data,\n                       actual_data = train_data)\n  \n  m_prophet = prophet::prophet(df = train_data,\n                               seasonality.mode = 'additive',\n                               changepoint.prior.scale = 0.01,\n                               seasonality.prior.scale = 5)\n  \n  future = prophet::make_future_dataframe(m_prophet, periods = nrow(test_data),\n                                          freq = 'day', include_history = FALSE)\n  \n  bind_rows(predict(m_prophet, future) %>% \n              select(ds, yhat) %>% \n              mutate(type = 'prophet'),\n            \n            future_prophet_boost %>% \n              filter(.model_desc != 'ACTUAL') %>% \n              select(ds = .index, yhat = .value) %>% \n              mutate(type = 'prophet_xgb')) %>% \n    \n    left_join(test_data, by = 'ds')\n  \n}"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-12",
    "href": "site_R.html#exemple-de-série-temporelle-12",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nOn test nos modèles sur différentes périodes :\n\nts_tune = ts_k_folds %>% mutate(result = map(splits, tune_prophet))"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-13",
    "href": "site_R.html#exemple-de-série-temporelle-13",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle\nOn peut donc comparer différents modèles :"
  },
  {
    "objectID": "site_R.html#exemple-de-série-temporelle-14",
    "href": "site_R.html#exemple-de-série-temporelle-14",
    "title": "",
    "section": "Exemple de série temporelle",
    "text": "Exemple de série temporelle"
  }
]