#| echo: false
library(tidyverse)
data <- read_csv(file = here::here("data/aw_fb_data.csv"))
data = data[,-c(1:2)]
df = data %>%
filter(device == 'apple watch') %>%
mutate(gender = ifelse(gender == 0,
'man', 'woman'))
# df_fb = data %>% filter(device == 'fitbit')
opts <- options(knitr.kable.NA = "")
?initial_split
# Chunk 1
library(tidymodels)
# Chunk 2
## ── Attaching packages ─────────────────────────────────────────────────────────────────────── tidymodels 1.0.0 ──
# Chunk 3
## ✔ broom        1.0.1      ✔ recipes      1.0.1
## ✔ dials        1.0.0      ✔ rsample      1.1.0
## ✔ dplyr        1.0.10     ✔ tibble       3.1.8
## ✔ ggplot2      3.3.6      ✔ tidyr        1.2.0
## ✔ infer        1.0.3      ✔ tune         1.0.0
## ✔ modeldata    1.0.0      ✔ workflows    1.0.0
## ✔ parsnip      1.0.1      ✔ workflowsets 1.0.0
## ✔ purrr        0.3.4      ✔ yardstick    1.0.0
# Chunk 4
## ── Conflicts ────────────────────────────────────────────────────────────────────────── tidymodels_conflicts() ──
## ✖ purrr::discard() masks scales::discard()
## ✖ dplyr::filter()  masks stats::filter()
## ✖ dplyr::lag()     masks stats::lag()
## ✖ recipes::step()  masks stats::step()
# Chunk 14
#| echo: false
library(tidyverse)
data <- read_csv(file = here::here("data/aw_fb_data.csv"))
data = data[,-c(1:2)]
df = data %>%
filter(device == 'apple watch') %>%
mutate(gender = ifelse(gender == 0,
'man', 'woman'))
# df_fb = data %>% filter(device == 'fitbit')
opts <- options(knitr.kable.NA = "")
# Chunk 15
#| echo: false
knitr::kable(df %>% head(6))
set.seed(123)
data_split <- initial_split(df,
strata = activity,
prop = 0.8)
# Chunk 1
library(tidymodels)
# Chunk 2
## ── Attaching packages ─────────────────────────────────────────────────────────────────────── tidymodels 1.0.0 ──
# Chunk 3
## ✔ broom        1.0.1      ✔ recipes      1.0.1
## ✔ dials        1.0.0      ✔ rsample      1.1.0
## ✔ dplyr        1.0.10     ✔ tibble       3.1.8
## ✔ ggplot2      3.3.6      ✔ tidyr        1.2.0
## ✔ infer        1.0.3      ✔ tune         1.0.0
## ✔ modeldata    1.0.0      ✔ workflows    1.0.0
## ✔ parsnip      1.0.1      ✔ workflowsets 1.0.0
## ✔ purrr        0.3.4      ✔ yardstick    1.0.0
# Chunk 4
## ── Conflicts ────────────────────────────────────────────────────────────────────────── tidymodels_conflicts() ──
## ✖ purrr::discard() masks scales::discard()
## ✖ dplyr::filter()  masks stats::filter()
## ✖ dplyr::lag()     masks stats::lag()
## ✖ recipes::step()  masks stats::step()
# Chunk 14
#| echo: false
library(tidyverse)
data <- read_csv(file = here::here("data/aw_fb_data.csv"))
data = data[,-c(1:2)]
df = data %>%
filter(device == 'apple watch') %>%
mutate(gender = ifelse(gender == 0,
'man', 'woman'))
# df_fb = data %>% filter(device == 'fitbit')
opts <- options(knitr.kable.NA = "")
# Chunk 15
#| echo: false
knitr::kable(df %>% head(6))
# Chunk 16
set.seed(123)
data_split <- initial_split(df,
strata = activity,
prop = 0.8)
# Chunk 17
data_split
# Chunk 18
train_data <- training(data_split)
test_data <- testing(data_split)
# Chunk 19
nrow(train_data)
# Chunk 20
nrow(test_data)
# Chunk 21
df_rec = recipe(activity ~ . , data = train_data)
# Chunk 22
df_rec
# Chunk 23
summary(df_rec)
# Chunk 24
df_rec = recipe(activity ~ . , data = train_data)
split = time_series_split(
ts_data,
assess = "15 days",
cumulative = TRUE)
# Chunk 1
library(tidymodels)
# Chunk 2
## ── Attaching packages ─────────────────────────────────────────────────────────────────────── tidymodels 1.0.0 ──
# Chunk 3
## ✔ broom        1.0.1      ✔ recipes      1.0.1
## ✔ dials        1.0.0      ✔ rsample      1.1.0
## ✔ dplyr        1.0.10     ✔ tibble       3.1.8
## ✔ ggplot2      3.3.6      ✔ tidyr        1.2.0
## ✔ infer        1.0.3      ✔ tune         1.0.0
## ✔ modeldata    1.0.0      ✔ workflows    1.0.0
## ✔ parsnip      1.0.1      ✔ workflowsets 1.0.0
## ✔ purrr        0.3.4      ✔ yardstick    1.0.0
# Chunk 4
## ── Conflicts ────────────────────────────────────────────────────────────────────────── tidymodels_conflicts() ──
## ✖ purrr::discard() masks scales::discard()
## ✖ dplyr::filter()  masks stats::filter()
## ✖ dplyr::lag()     masks stats::lag()
## ✖ recipes::step()  masks stats::step()
# Chunk 14
#| echo: false
library(tidyverse)
data <- read_csv(file = here::here("data/aw_fb_data.csv"))
data = data[,-c(1:2)]
df = data %>%
filter(device == 'apple watch') %>%
mutate(gender = ifelse(gender == 0,
'man', 'woman'))
# df_fb = data %>% filter(device == 'fitbit')
opts <- options(knitr.kable.NA = "")
# Chunk 15
#| echo: false
knitr::kable(df %>% head(6))
# Chunk 16
set.seed(123)
data_split <- initial_split(df,
strata = activity,
prop = 0.8)
# Chunk 17
data_split
# Chunk 18
train_data <- training(data_split)
test_data <- testing(data_split)
# Chunk 19
nrow(train_data)
# Chunk 20
nrow(test_data)
# Chunk 21
df_rec = recipe(activity ~ . , data = train_data)
# Chunk 22
df_rec
# Chunk 23
summary(df_rec)
# Chunk 24
df_rec = recipe(activity ~ . , data = train_data)
# Chunk 25
#| code-line-numbers: "1|2|3|4|5|6|7|1-7"
df_rec = recipe(activity ~ . , data = train_data) %>%
step_rm(device) %>%
step_string2factor(gender) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_numeric()) %>%
step_corr(all_numeric_predictors(), threshold = 0.7)
# Chunk 26
encoded = df_rec %>%
prep() %>%
juice()
# Chunk 27
#| echo: false
knitr::kable(encoded %>% head(6))
# Chunk 28
rf_spec <- rand_forest(trees = 200) %>%
set_engine("ranger") %>%
set_mode("classification")
# Chunk 29
#| code-line-numbers: "1-3|1|2|3|1-3"
activity_wflow <- workflow() %>%
add_recipe(df_rec) %>%
add_model(rf_spec)
# Chunk 30
activty_fit <- activity_wflow %>%
fit(data = train_data)
# Chunk 31
activity_pred <- augment(activty_fit,
test_data)
# Chunk 32
table = activity_pred %>%
select(activity,
contains(".pred_"))
# Chunk 33
#| echo: false
knitr::kable(table %>% head(6))
# Chunk 34
activity_pred %>%
accuracy(truth = as.factor(activity), .pred_class)
# Chunk 35
#| fig-align: "center"
#| code-line-numbers: "1-5|1|2|3|4|5|1-5"
activity_pred %>%
select(activity, .pred_class) %>%
mutate(activ = as.factor(activity)) %>%
conf_mat(activ, .pred_class) %>%
autoplot(type = "heatmap")
# Chunk 36
#| fig-align: "center"
#| code-line-numbers: "1-4|1|2|3|4|5"
activity_pred %>%
select(-.pred_class) %>%
roc_curve(truth = as.factor(activity), contains(".pred_")) %>%
autoplot()
# Chunk 37
tune_spec <- rand_forest(mtry = tune(),
trees = 200,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
# Chunk 38
tune_wf <- workflow() %>%
add_recipe(df_rec) %>%
add_model(tune_spec)
# Chunk 39
#| echo: false
doParallel::registerDoParallel()
# Chunk 40
set.seed(100)
cv_folds <- vfold_cv(train_data,
v = 3,
strata = activity)
# Chunk 41
set.seed(333)
tune_res <- tune_grid(tune_wf,
resamples = cv_folds,
grid = 20)
# Chunk 42
#| fig-align: "center"
tune_res %>%
autoplot()
# Chunk 43
#| fig-align: "center"
#| echo: false
# tune_res %>%
#   collect_metrics() %>%
#   filter(.metric == "accuracy") %>%
#   select(mean, min_n, mtry) %>%
#   pivot_longer(min_n:mtry,
#                values_to = "value",
#                names_to = "parameter") %>%
#   ggplot(aes(value, mean, color = parameter)) +
#   geom_point(show.legend = FALSE) +
#   facet_wrap(~parameter, scales = "free_x") +
#   labs(x = NULL, y = "ACC")
# Chunk 44
rf_grid <- grid_regular(mtry(range = c(3, 11)),
min_n(range = c(1, 8)),
levels = 4) # nombre de valeurs testées par paramètre
# Chunk 45
set.seed(456)
regular_res <- tune_grid(tune_wf,
resamples = cv_folds,
grid = rf_grid)
# Chunk 46
#| fig-align: "center"
regular_res %>%
autoplot()
# Chunk 47
#| fig-align: "center"
#| echo: false
# regular_res %>%
#   collect_metrics() %>%
#   filter(.metric == "accuracy") %>%
#   select(mean, min_n, mtry) %>%
#   pivot_longer(min_n:mtry,
#                values_to = "value",
#                names_to = "parameter") %>%
#   ggplot(aes(value, mean, color = parameter)) +
#   geom_point(show.legend = FALSE) +
#   facet_wrap(~parameter, scales = "free_x") +
#   labs(x = NULL, y = "ACC")
# Chunk 48
best_acc <- select_best(regular_res, "accuracy")
final_rf <- finalize_model(tune_spec,
best_acc)
# Chunk 49
final_wf <- workflow() %>%
add_recipe(df_rec) %>%
add_model(final_rf)
# Chunk 50
final_res <- final_wf %>%
last_fit(data_split) # train sur train et evalue sur test
# Chunk 51
final_res %>%
collect_metrics()
# Chunk 52
#| fig-align: "center"
final_res %>%
collect_predictions() %>%
conf_mat(activity, .pred_class) %>%
autoplot(type = "heatmap")
# Chunk 53
#| fig-align: "center"
final_res %>%
collect_predictions() %>%
select(-.pred_class) %>%
roc_curve(truth = as.factor(activity), contains(".pred_")) %>%
autoplot()
# Chunk 54
final_activity_model = final_res %>%
extract_workflow()
saveRDS(final_activity_model, here::here("data", "activity_wf_model.rds"))
# Chunk 55
final_activity_model
# Chunk 56
#| echo: false
# import des données
ts_data <- read_csv("data/paris_temp.csv") %>%
select(date, temp)
# format prophet
ts_data$ds = ts_data$date
ts_data$y = ts_data$temp
ts_data <- ts_data %>%
select(-c(date, temp))
# Chunk 57
library(modeltime)
library(timetk)
library(lubridate)
library(ggblanket)
# Chunk 58
#| echo: false
knitr::kable(ts_data %>% tail(6))
split = time_series_split(
ts_data,
assess = "15 days",
cumulative = TRUE)
#| output-location: slide
#| fig-width: 18
#| fig-height: 9
split %>%
tk_time_series_cv_plan() %>%
filter(ds > "2022-03-01") %>%
plot_time_series_cv_plan(ds, y)
split = time_series_split(
ts_data,
assess = "15 days",
cumulative = FALSE)
#| output-location: slide
#| fig-width: 18
#| fig-height: 9
split %>%
tk_time_series_cv_plan() %>%
filter(ds > "2022-03-01") %>%
plot_time_series_cv_plan(ds, y)
#| output-location: slide
#| fig-width: 18
#| fig-height: 9
split %>%
tk_time_series_cv_plan() %>%
# filter(ds > "2022-03-01") %>%
plot_time_series_cv_plan(ds, y)
split = time_series_split(
ts_data,
assess = "15 days",
cumulative = TRUE)
#| output-location: slide
#| fig-width: 18
#| fig-height: 9
split %>%
tk_time_series_cv_plan() %>%
filter(ds > "2022-03-01") %>%
plot_time_series_cv_plan(ds, y)
?time_series_split
# Chunk 1
library(tidymodels)
# Chunk 2
## ── Attaching packages ─────────────────────────────────────────────────────────────────────── tidymodels 1.0.0 ──
# Chunk 3
## ✔ broom        1.0.1      ✔ recipes      1.0.1
## ✔ dials        1.0.0      ✔ rsample      1.1.0
## ✔ dplyr        1.0.10     ✔ tibble       3.1.8
## ✔ ggplot2      3.3.6      ✔ tidyr        1.2.0
## ✔ infer        1.0.3      ✔ tune         1.0.0
## ✔ modeldata    1.0.0      ✔ workflows    1.0.0
## ✔ parsnip      1.0.1      ✔ workflowsets 1.0.0
## ✔ purrr        0.3.4      ✔ yardstick    1.0.0
# Chunk 4
## ── Conflicts ────────────────────────────────────────────────────────────────────────── tidymodels_conflicts() ──
## ✖ purrr::discard() masks scales::discard()
## ✖ dplyr::filter()  masks stats::filter()
## ✖ dplyr::lag()     masks stats::lag()
## ✖ recipes::step()  masks stats::step()
# Chunk 14
#| echo: false
library(tidyverse)
data <- read_csv(file = here::here("data/aw_fb_data.csv"))
data = data[,-c(1:2)]
df = data %>%
filter(device == 'apple watch') %>%
mutate(gender = ifelse(gender == 0,
'man', 'woman'))
# df_fb = data %>% filter(device == 'fitbit')
opts <- options(knitr.kable.NA = "")
# Chunk 15
#| echo: false
knitr::kable(df %>% head(6))
# Chunk 16
set.seed(123)
data_split <- initial_split(df,
strata = activity,
prop = 0.8)
# Chunk 17
data_split
# Chunk 18
train_data <- training(data_split)
test_data <- testing(data_split)
# Chunk 19
nrow(train_data)
# Chunk 20
nrow(test_data)
# Chunk 21
df_rec = recipe(activity ~ . , data = train_data)
# Chunk 22
df_rec
# Chunk 23
summary(df_rec)
# Chunk 24
df_rec = recipe(activity ~ . , data = train_data)
# Chunk 25
#| code-line-numbers: "1|2|3|4|5|6|7|1-7"
df_rec = recipe(activity ~ . , data = train_data) %>%
step_rm(device) %>%
step_string2factor(gender) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_numeric()) %>%
step_corr(all_numeric_predictors(), threshold = 0.7)
# Chunk 26
encoded = df_rec %>%
prep() %>%
juice()
# Chunk 27
#| echo: false
knitr::kable(encoded %>% head(6))
# Chunk 28
rf_spec <- rand_forest(trees = 200) %>%
set_engine("ranger") %>%
set_mode("classification")
# Chunk 29
#| code-line-numbers: "1-3|1|2|3|1-3"
activity_wflow <- workflow() %>%
add_recipe(df_rec) %>%
add_model(rf_spec)
# Chunk 30
activty_fit <- activity_wflow %>%
fit(data = train_data)
# Chunk 31
activity_pred <- augment(activty_fit,
test_data)
# Chunk 32
table = activity_pred %>%
select(activity,
contains(".pred_"))
# Chunk 33
#| echo: false
knitr::kable(table %>% head(6))
# Chunk 34
activity_pred %>%
accuracy(truth = as.factor(activity), .pred_class)
# Chunk 35
#| fig-align: "center"
#| code-line-numbers: "1-5|1|2|3|4|5|1-5"
activity_pred %>%
select(activity, .pred_class) %>%
mutate(activ = as.factor(activity)) %>%
conf_mat(activ, .pred_class) %>%
autoplot(type = "heatmap")
# Chunk 36
#| fig-align: "center"
#| code-line-numbers: "1-4|1|2|3|4|5"
activity_pred %>%
select(-.pred_class) %>%
roc_curve(truth = as.factor(activity), contains(".pred_")) %>%
autoplot()
# Chunk 37
tune_spec <- rand_forest(mtry = tune(),
trees = 200,
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger")
# Chunk 38
tune_wf <- workflow() %>%
add_recipe(df_rec) %>%
add_model(tune_spec)
# Chunk 39
#| echo: false
doParallel::registerDoParallel()
# Chunk 40
set.seed(100)
cv_folds <- vfold_cv(train_data,
v = 3,
strata = activity)
# Chunk 41
set.seed(333)
tune_res <- tune_grid(tune_wf,
resamples = cv_folds,
grid = 20)
